import { jsPDF } from 'jspdf';
import fs from 'fs';
import path from 'path';
import axios from 'axios';
import { verifyUPI } from './verifyUPI';


const fetchImageAsBase64 = async (imageUrl) => {
    try {
        const response = await axios.get(imageUrl, { responseType: 'arraybuffer' });
        return Buffer.from(response.data, 'binary').toString('base64');
    } catch (error) {
        console.error('Error fetching image:', error);
        return null;
    }
};

export const generateOSINTPDF = async (eyeconDetails, truecallerDetails, mobNo) => {
    try {
        // Read the logo file from the public folder
        const logoPath = path.join(process.cwd(), 'public', 'logo.png');
        const logoData = fs.readFileSync(logoPath).toString('base64');

        // Create a new jsPDF instance
        const doc = new jsPDF();

        // Add the logo at the center of the first page with reduced quality
        const imgProps = doc.getImageProperties(`data:image/png;base64,${logoData}`);
        const imgWidth = 50; // Width of the image in the PDF
        const imgHeight = (imgProps.height * imgWidth) / imgProps.width;
        const pageWidth = doc.internal.pageSize.getWidth();
        const xOffset = (pageWidth - imgWidth) / 2;

        // Reduce image quality by adjusting the scale and compression
        doc.addImage(`data:image/png;base64,${logoData}`, 'PNG', xOffset, 10, imgWidth, imgHeight, '', 'FAST');

        // Add the header below the logo
        doc.setFontSize(16);
        doc.setFont('helvetica', 'bold');
        doc.text('Garuda Intelligence', pageWidth / 2, imgHeight + 10, { align: 'center' });

        // Add Subject Information section
        const currentDate = new Date().toLocaleDateString();
        doc.setFontSize(14);
        doc.text('Subject Information', 20, imgHeight + 25);
        doc.setFontSize(12);
        doc.setFont('helvetica', 'normal');
        doc.text(`Phone Number: ${mobNo}`, 20, imgHeight + 35);
        doc.text(`Date of Report: ${currentDate}`, 20, imgHeight + 45);
        doc.text('Report Generated by: Garuda Intelligence', 20, imgHeight + 55);

        // Add Truecaller profile image if it exists
        let namesYStart = imgHeight + 65;
        if (truecallerDetails.data[0].image) {
            const truecallerImageBase64 = await fetchImageAsBase64(truecallerDetails.data[0].image);
            if (truecallerImageBase64) {
                const truecallerImgProps = doc.getImageProperties(`data:image/jpeg;base64,${truecallerImageBase64}`);
                const truecallerImgWidth = 50; // Width of the image in the PDF
                const truecallerImgHeight = (truecallerImgProps.height * truecallerImgWidth) / truecallerImgProps.width;

                // Check if there's enough space for the image on the current page
                const remainingSpace = doc.internal.pageSize.getHeight() - namesYStart;
                if (truecallerImgHeight > remainingSpace) {
                    doc.addPage();
                    namesYStart = 10; // Reset starting position on new page
                }

                doc.addImage(`data:image/jpeg;base64,${truecallerImageBase64}`, 'JPEG', xOffset, namesYStart, truecallerImgWidth, truecallerImgHeight, '', 'FAST');
                namesYStart += truecallerImgHeight + 10;
            }
        }

        // Add Names section
        doc.setFontSize(14);
        doc.setFont('helvetica', 'bold');
        doc.text('Names:', 20, namesYStart);

        // Truecaller Full Name
        doc.setFontSize(12);
        doc.setFont('helvetica', 'normal');
        doc.text(`1. ${truecallerDetails.data[0]?.name || 'N/A'}`, 30, namesYStart + 10);

        // Eyecon other names
        eyeconDetails.otherNames.forEach((nameObj, index) => {
            const yPos = namesYStart + 20 + (index * 10);

            // Check if there's enough space for additional names
            if (yPos > doc.internal.pageSize.getHeight() - 10) {
                doc.addPage();
                namesYStart = 10; // Reset starting position on new page
            }

            doc.text(`${index + 2}. ${nameObj.name}`, 30, yPos);
        });

        // Add Email section if it exists
        if (truecallerDetails.data[0]?.internetAddresses && truecallerDetails.data[0]?.internetAddresses.length > 0) {
            const emailYStart = namesYStart + 30 + (eyeconDetails.otherNames.length * 10);

            // Check if there's enough space for email section
            if (emailYStart > doc.internal.pageSize.getHeight() - 10) {
                doc.addPage();
                namesYStart = 10; // Reset starting position on new page
            }

            doc.setFontSize(14);
            doc.setFont('helvetica', 'bold');
            doc.text('Email:', 20, emailYStart);

            // Truecaller Email
            doc.setFontSize(12);
            doc.setFont('helvetica', 'normal');
            doc.text(truecallerDetails.data[0]?.internetAddresses[0]?.id, 30, emailYStart + 10);
        }

        // Add Carrier Info section if phone details exist
        if (truecallerDetails.data[0]?.phones && truecallerDetails.data[0]?.phones.length > 0) {
            const carrierYStart = namesYStart + 60 + (eyeconDetails.otherNames.length * 10);

            // Check if there's enough space for carrier info section
            if (carrierYStart > doc.internal.pageSize.getHeight() - 10) {
                doc.addPage();
                namesYStart = 10; // Reset starting position on new page
            }

            doc.setFontSize(14);
            doc.setFont('helvetica', 'bold');
            doc.text('Carrier Info:', 20, carrierYStart);
            doc.setFontSize(12);
            doc.setFont('helvetica', 'normal');
            doc.text(`Mobile: ${mobNo}`, 30, carrierYStart + 10);
            doc.text(`Carrier: ${truecallerDetails.data[0]?.phones[0]?.carrier || 'N/A'}`, 30, carrierYStart + 20);
            doc.text(`Type: ${truecallerDetails.data[0]?.phones[0]?.type || 'N/A'}`, 30, carrierYStart + 30);
            if (truecallerDetails.data[0]?.addresses?.length > 0) {
                doc.text(`Address: ${truecallerDetails.data[0]?.addresses[0]?.address || 'N/A'}`, 30, carrierYStart + 40);
            } else {
                doc.text(`Address: N/A`, 30, carrierYStart + 40);
            }
        }

        // // Verify UPI details and add them to the second page
        // const upiResults = await verifyUPI(mobNo);
        // if (upiResults.length > 0) {
        //     if (doc.internal.getNumberOfPages() > 1) {
        //         doc.setPage(2); // Go to the second page
        //     } else {
        //         doc.addPage(); // Add a new page if not already added
        //     }
        //     let upiYStart = 20;

        //     doc.setFontSize(14);
        //     doc.setFont('helvetica', 'bold');
        //     doc.text('Verified UPI Addresses:', 20, upiYStart);
        //     upiYStart += 10;

        //     upiResults.forEach((upiResult, index) => {
        //         doc.setFontSize(12);
        //         doc.setFont('helvetica', 'normal');
        //         doc.text(`${index + 1}. UPI Handle: ${upiResult.vpaAddress}`, 30, upiYStart);
        //         doc.text(`   Name at Bank: ${upiResult.name_at_bank}`, 30, upiYStart + 10);
        //         upiYStart += 20;
        //     });
        // }

        // Convert the document to a Buffer and return it
        const pdfBuffer = Buffer.from(doc.output('arraybuffer'));
        return pdfBuffer;
    } catch (error) {
        console.error('Error generating OSINT PDF:', error);
        throw new Error('Failed to generate OSINT PDF');
    }
};
